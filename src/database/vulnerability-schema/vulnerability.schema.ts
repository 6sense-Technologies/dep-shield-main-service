import { Schema as NestSchema, Prop, SchemaFactory } from '@nestjs/mongoose';
import { Document, Schema as MongooseSchema } from 'mongoose';

export type VulnerabilityDocument = Vulnerability & Document;

// @NestSchema({ timestamps: true })
// export class Vulnerability {
//   @Prop({
//     required: true,
//     type: MongooseSchema.Types.ObjectId,
//     ref: 'Dependency',
//   })
//   dependencyId: MongooseSchema.Types.ObjectId;

//   @Prop({ required: false })
//   id: string;

//   @Prop({ required: false })
//   summary: string;

//   @Prop({ required: false })
//   details: string;

//   @Prop({ required: false })
//   cveId?: string;

//   @Prop({ required: false })
//   published: string;

//   @Prop({ required: false, type: [String] })
//   cweId?: string[];

//   @Prop({ required: false })
//   nvd_published_at?: string;

//   @Prop({ required: false })
//   intensity?: string;

//   @Prop({ required: false, type: [String] })
//   references?: string[];

//   @Prop({ required: false })
//   nvdVulnStatus?: string;

//   @Prop({ required: false })
//   nvdDescription?: string;

//   @Prop({ required: false, type: [String] })
//   weaknesses?: string[];

//   @Prop({
//     required: false,
//     type: Object,
//   })
//   severity?: {
//     cvssMetricV40?: {
//       source: string;
//       type: string;
//       cvssData: {
//         version: string;
//         vectorString: string;
//         baseScore: number;
//         baseSeverity: string;
//         attackVector: string;
//         attackComplexity: string;
//         privilegesRequired: string;
//         userInteraction: string;
//         scope: string;
//         confidentialityImpact: string;
//         integrityImpact: string;
//         availabilityImpact: string;
//       };
//     };
//     cvssMetricV31?: {
//       source: string;
//       type: string;
//       cvssData: {
//         version: string;
//         vectorString: string;
//         baseScore: number;
//         baseSeverity: string;
//         attackVector: string;
//         attackComplexity: string;
//         privilegesRequired: string;
//         userInteraction: string;
//         scope: string;
//         confidentialityImpact: string;
//         integrityImpact: string;
//         availabilityImpact: string;
//       };
//     };
//     cvssMetricV30?: {
//       source: string;
//       type: string;
//       cvssData: {
//         version: string;
//         vectorString: string;
//         baseScore: number;
//         baseSeverity: string;
//         attackVector: string;
//         attackComplexity: string;
//         privilegesRequired: string;
//         userInteraction: string;
//         scope: string;
//         confidentialityImpact: string;
//         integrityImpact: string;
//         availabilityImpact: string;
//       };
//     };
//     cvssMetricV2?: {
//       source: string;
//       type: string;
//       cvssData: {
//         version: string;
//         vectorString: string;
//         baseScore: number;
//         baseSeverity: string;
//         attackVector: string;
//         attackComplexity: string;
//         privilegesRequired: string;
//         userInteraction: string;
//         scope: string;
//         confidentialityImpact: string;
//         integrityImpact: string;
//         availabilityImpact: string;
//       };
//     };
//   };
// }

// export const VulnerabilitySchema = SchemaFactory.createForClass(Vulnerability);
// VulnerabilitySchema.index({ dependencyId: 1 });

@NestSchema({ timestamps: true })
export class Vulnerability {
    @Prop({
        required: true,
        type: MongooseSchema.Types.ObjectId,
        ref: 'Dependency',
    })
    dependencyId: MongooseSchema.Types.ObjectId;

    @Prop({
        required: true,
        type: MongooseSchema.Types.ObjectId,
        ref: 'DependencyVersion',
    })
    dependencyVersion: MongooseSchema.Types.ObjectId;

    @Prop({ required: false })
    id: string;

    @Prop({ required: false })
    summary: string;

    @Prop({ required: false })
    details: string;

    @Prop({ required: false })
    cveId?: string;

    @Prop({ required: false })
    published: string;

    @Prop({ required: false, type: [String] })
    cweId?: string[];

    @Prop({ required: false })
    nvd_published_at?: string;

    @Prop({ required: false })
    intensity?: string;

    @Prop({ required: false, type: [String] })
    references?: string[];

    @Prop({ required: false })
    nvdVulnStatus?: string;

    @Prop({ required: false })
    nvdDescription?: string;

    @Prop({ required: false, type: [String] })
    weaknesses?: string[];

    @Prop({
        required: false,
        type: Object,
    })
    severity?: {
        cvssMetricV40?: {
            source: string;
            type: string;
            cvssData: {
                version: string;
                vectorString: string;
                baseScore: number;
                baseSeverity: string;
                attackVector: string;
                attackComplexity: string;
                privilegesRequired: string;
                userInteraction: string;
                scope: string;
                confidentialityImpact: string;
                integrityImpact: string;
                availabilityImpact: string;
            };
        };
        cvssMetricV31?: {
            source: string;
            type: string;
            cvssData: {
                version: string;
                vectorString: string;
                baseScore: number;
                baseSeverity: string;
                attackVector: string;
                attackComplexity: string;
                privilegesRequired: string;
                userInteraction: string;
                scope: string;
                confidentialityImpact: string;
                integrityImpact: string;
                availabilityImpact: string;
            };
        };
        cvssMetricV30?: {
            source: string;
            type: string;
            cvssData: {
                version: string;
                vectorString: string;
                baseScore: number;
                baseSeverity: string;
                attackVector: string;
                attackComplexity: string;
                privilegesRequired: string;
                userInteraction: string;
                scope: string;
                confidentialityImpact: string;
                integrityImpact: string;
                availabilityImpact: string;
            };
        };
        cvssMetricV2?: {
            source: string;
            type: string;
            cvssData: {
                version: string;
                vectorString: string;
                baseScore: number;
                baseSeverity: string;
                attackVector: string;
                attackComplexity: string;
                privilegesRequired: string;
                userInteraction: string;
                scope: string;
                confidentialityImpact: string;
                integrityImpact: string;
                availabilityImpact: string;
            };
        };
    };
}

export const VulnerabilitySchema = SchemaFactory.createForClass(Vulnerability);
VulnerabilitySchema.index({ dependencyId: 1 });
